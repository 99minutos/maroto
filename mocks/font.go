// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import font "github.com/johnfercher/maroto/font"
import mock "github.com/stretchr/testify/mock"

// Font is an autogenerated mock type for the Font type
type Font struct {
	mock.Mock
}

// GetFamily provides a mock function with given fields:
func (_m *Font) GetFamily() font.Family {
	ret := _m.Called()

	var r0 font.Family
	if rf, ok := ret.Get(0).(func() font.Family); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(font.Family)
	}

	return r0
}

// GetFamilyString provides a mock function with given fields: _a0
func (_m *Font) GetFamilyString(_a0 font.Family) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(font.Family) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetFont provides a mock function with given fields:
func (_m *Font) GetFont() (font.Family, font.Style, float64) {
	ret := _m.Called()

	var r0 font.Family
	if rf, ok := ret.Get(0).(func() font.Family); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(font.Family)
	}

	var r1 font.Style
	if rf, ok := ret.Get(1).(func() font.Style); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(font.Style)
	}

	var r2 float64
	if rf, ok := ret.Get(2).(func() float64); ok {
		r2 = rf()
	} else {
		r2 = ret.Get(2).(float64)
	}

	return r0, r1, r2
}

// GetSize provides a mock function with given fields:
func (_m *Font) GetSize() float64 {
	ret := _m.Called()

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// GetStyle provides a mock function with given fields:
func (_m *Font) GetStyle() font.Style {
	ret := _m.Called()

	var r0 font.Style
	if rf, ok := ret.Get(0).(func() font.Style); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(font.Style)
	}

	return r0
}

// GetStyleString provides a mock function with given fields: style
func (_m *Font) GetStyleString(style font.Style) string {
	ret := _m.Called(style)

	var r0 string
	if rf, ok := ret.Get(0).(func(font.Style) string); ok {
		r0 = rf(style)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SetFamily provides a mock function with given fields: family
func (_m *Font) SetFamily(family font.Family) {
	_m.Called(family)
}

// SetFont provides a mock function with given fields: family, style, size
func (_m *Font) SetFont(family font.Family, style font.Style, size float64) {
	_m.Called(family, style, size)
}

// SetSize provides a mock function with given fields: size
func (_m *Font) SetSize(size float64) {
	_m.Called(size)
}

// SetStyle provides a mock function with given fields: style
func (_m *Font) SetStyle(style font.Style) {
	_m.Called(style)
}
